// <auto-generated />
using System;
using FundMyPortfol.io.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FundMyPortfol.io.Migrations
{
    [DbContext(typeof(PortofolioContext))]
    partial class PortofolioContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FundMyPortfol.io.Models.BackerBuyPackage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Backer");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime");

                    b.Property<long>("Package");

                    b.HasKey("Id");

                    b.HasIndex("Backer");

                    b.HasIndex("Package");

                    b.ToTable("BackerBuyPackage");
                });

            modelBuilder.Entity("FundMyPortfol.io.Models.BackerFollowCreator", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Backer");

                    b.Property<long>("ProjectCreator");

                    b.HasKey("Id");

                    b.HasIndex("Backer");

                    b.HasIndex("ProjectCreator");

                    b.ToTable("BackerFollowCreator");
                });

            modelBuilder.Entity("FundMyPortfol.io.Models.Package", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<int?>("PackageLeft");

                    b.Property<string>("PackageName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<decimal>("PledgeAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<long>("Project");

                    b.Property<int>("TimesSelected");

                    b.HasKey("Id");

                    b.HasIndex("Project");

                    b.ToTable("Package");
                });

            modelBuilder.Entity("FundMyPortfol.io.Models.Project", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryString")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Category")
                        .HasDefaultValueSql("('innovation')")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("ntext");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("date");

                    b.Property<int>("Likes");

                    b.Property<decimal>("MoneyGoal")
                        .HasColumnType("money");

                    b.Property<decimal>("MoneyReach")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<DateTime>("PablishDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("ProjectCtrator");

                    b.Property<byte[]>("ProjectImage")
                        .HasColumnType("image");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("ProjectCtrator");

                    b.HasIndex("Title")
                        .IsUnique()
                        .HasName("UQ__Project__2CB664DCA569949C");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("FundMyPortfol.io.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<long>("UserDetails");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserDetails")
                        .IsUnique()
                        .HasName("UQ__User__096601D9463255F4");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("FundMyPortfol.io.Models.UserDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Country")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("PostalCode")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<byte[]>("ProfileImage")
                        .HasColumnType("image");

                    b.Property<string>("Street")
                        .HasMaxLength(100);

                    b.Property<string>("Town")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("UserDetails");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<long>", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<long>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<long>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<long>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FundMyPortfol.io.Models.BackerBuyPackage", b =>
                {
                    b.HasOne("FundMyPortfol.io.Models.User", "BackerNavigation")
                        .WithMany("BackerBuyPackage")
                        .HasForeignKey("Backer")
                        .HasConstraintName("FK__BackerBuy__Backe__4F7CD00D");

                    b.HasOne("FundMyPortfol.io.Models.Package", "PackageNavigation")
                        .WithMany("BackerBuyPackage")
                        .HasForeignKey("Package")
                        .HasConstraintName("FK__BackerBuy__Packa__5070F446");
                });

            modelBuilder.Entity("FundMyPortfol.io.Models.BackerFollowCreator", b =>
                {
                    b.HasOne("FundMyPortfol.io.Models.User", "BackerNavigation")
                        .WithMany("BackerFollowCreatorBackerNavigation")
                        .HasForeignKey("Backer")
                        .HasConstraintName("FK__BackerFol__Backe__534D60F1");

                    b.HasOne("FundMyPortfol.io.Models.User", "ProjectCreatorNavigation")
                        .WithMany("BackerFollowCreatorProjectCreatorNavigation")
                        .HasForeignKey("ProjectCreator")
                        .HasConstraintName("FK__BackerFol__Proje__5441852A");
                });

            modelBuilder.Entity("FundMyPortfol.io.Models.Package", b =>
                {
                    b.HasOne("FundMyPortfol.io.Models.Project", "ProjectNavigation")
                        .WithMany("Package")
                        .HasForeignKey("Project")
                        .HasConstraintName("FK__Package__Project__4CA06362");
                });

            modelBuilder.Entity("FundMyPortfol.io.Models.Project", b =>
                {
                    b.HasOne("FundMyPortfol.io.Models.User", "ProjectCtratorNavigation")
                        .WithMany("Project")
                        .HasForeignKey("ProjectCtrator")
                        .HasConstraintName("FK__Project__Project__46E78A0C");
                });

            modelBuilder.Entity("FundMyPortfol.io.Models.User", b =>
                {
                    b.HasOne("FundMyPortfol.io.Models.UserDetails", "UserDetailsNavigation")
                        .WithOne("User")
                        .HasForeignKey("FundMyPortfol.io.Models.User", "UserDetails")
                        .HasConstraintName("FK__User__UserDetail__3F466844");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<long>")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("FundMyPortfol.io.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("FundMyPortfol.io.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<long>")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FundMyPortfol.io.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("FundMyPortfol.io.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
